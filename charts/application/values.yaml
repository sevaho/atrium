replicaCount: 2

image:
  repository: nginx
  tag: latest
  pullPolicy: Always

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  hosts:
    - foo.bar
  ingressClass: nginx
  tls:
    secretName: example-tls-certs
    clusterIssuer: letsencrypt-prod
  extraAnnotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"

pvc:
  enabled: false
  name: data
  size: 2Gi
  mountPath: /data

env:
  ENVIRONMENT: STAGING

envFrom: {}
  # - secretRef:
  #     name: my-app-secrets

jobs: {}
  # autoMigrate:
  #   enabled: true


resources:
  limits:
    memory: 200Mi
  requests:
    memory: 20Mi
livenessProbe: {}
  # httpGet:
  #   path: /
  #   port: http
  #   scheme: HTTP
  # initialDelaySeconds: 10
  # periodSeconds: 5
  # successThreshold: 1
  # timeoutSeconds: 3
readinessProbe: {}
  # httpGet:
  #   path: /
  #   port: http
  #   scheme: HTTP
  # initialDelaySeconds: 10
  # periodSeconds: 10
  # successThreshold: 2
  # timeoutSeconds: 3

security:
  enabled: true
  # SecurityContext of the pod
  podSecurityContext:
    runAsNonRoot: true
    # Only using 1000 for safety. Never add 0 (= root)
    runAsUser: 1000
    runAsGroup: 1000

  # SecurityContext of the container
  containerSecurityContext:
    # There are some rules to when it's true, set to false to be safe
    allowPrivilegeEscalation: false
    # This does not impact writing to an emptyDir
    readOnlyRootFilesystem: false

  # SecurityContext of the container
  initContainerSecurityContext:
    # There are some rules to when it's true, set to false to be safe
    allowPrivilegeEscalation: false
    # This does not impact writing to an emptyDir
    readOnlyRootFilesystem: true
